Great choice! Migrating an Oracle 2-node RAC database to new servers using Data Guard is one of the most reliable and minimal-downtime methods. This approach involves setting up a physical standby database on the new servers and performing a switchover once synchronization is complete.

üß≠ OVERVIEW ‚Äì RAC to RAC Migration using Data Guard
Feature	Description
Source	2-node Oracle RAC (e.g., PRODDB)
Target	New 2-node Oracle RAC (e.g., PRODDBNEW)
Database Type	Primary ‚Üí Physical Standby
Tools Used	Data Guard, RMAN, DGMGRL (optional), srvctl
Downtime	Only during switchover
Oracle Version	Same (e.g., 19c), or compatible
Storage	Typically ASM on both ends
‚úÖ PREREQUISITES
On Both Source and Target:
Oracle software installed (same version and patch)

ASM disk groups created

OS-level users/groups same

Network connectivity working (SSH, TNS, SCAN)

Archive log + force logging enabled on primary

Unique DB_UNIQUE_NAME for both DBs

üß∞ STEP-BY-STEP MIGRATION PLAN
üîπ STEP 1: ENABLE ARCHIVELOG + FORCE LOGGING ON PRIMARY (SOURCE)
sql
Copy
Edit
-- On Primary
archive log list;
alter database force logging;
üîπ STEP 2: PREPARE PASSWORD FILE ON BOTH SYSTEMS
bash
Copy
Edit
-- On both nodes
orapwd file=$ORACLE_HOME/dbs/orapwPRODDB password=oracle format=12
Copy to target and rename accordingly.

üîπ STEP 3: CREATE STANDBY PARAMETER FILE ON PRIMARY
sql
Copy
Edit
-- On Primary
create pfile='/tmp/initPRODDBSTBY.ora' from spfile;
Edit the file for standby configuration:

ini
Copy
Edit
db_name=PRODDB
db_unique_name=PRODDBSTBY
log_file_name_convert='+DATA/PRODDB/','+DATA/PRODDBSTBY/'
db_file_name_convert='+DATA/PRODDB/','+DATA/PRODDBSTBY/'
fal_server=PRODDB
fal_client=PRODDBSTBY
log_archive_config='DG_CONFIG=(PRODDB,PRODDBSTBY)'
log_archive_dest_2='SERVICE=PRODDBSTBY LGWR ASYNC VALID_FOR=(ONLINE_LOGFILES,PRIMARY_ROLE) DB_UNIQUE_NAME=PRODDBSTBY'
üîπ STEP 4: COPY PFILE TO TARGET AND START NOMOUNT
bash
Copy
Edit
scp /tmp/initPRODDBSTBY.ora targetserver:/u01/app/oracle/product/19.0.0/dbhome_1/dbs/initPRODDBSTBY.ora
bash
Copy
Edit
export ORACLE_SID=PRODDBSTBY
sqlplus / as sysdba
startup nomount pfile='.../initPRODDBSTBY.ora';
Create required directories and audit folders, etc.

üîπ STEP 5: SETUP TNSNAMES.ORA ON BOTH SERVERS
ini
Copy
Edit
PRODDB =
  (DESCRIPTION =
    (ADDRESS = (PROTOCOL = TCP)(HOST = source-scan)(PORT = 1521))
    (CONNECT_DATA =
      (SERVER = DEDICATED)
      (SERVICE_NAME = PRODDB)
    )
  )

PRODDBSTBY =
  (DESCRIPTION =
    (ADDRESS = (PROTOCOL = TCP)(HOST = target-scan)(PORT = 1521))
    (CONNECT_DATA =
      (SERVER = DEDICATED)
      (SERVICE_NAME = PRODDBSTBY)
    )
  )
Test connectivity using:

bash
Copy
Edit
tnsping PRODDBSTBY
üîπ STEP 6: DUPLICATE DATABASE FOR STANDBY USING RMAN
On primary:

bash
Copy
Edit
rman target sys/oracle@PRODDB auxiliary sys/oracle@PRODDBSTBY
Run:

rman
Copy
Edit
DUPLICATE TARGET DATABASE 
FOR STANDBY 
FROM ACTIVE DATABASE 
DORECOVER 
SPFILE
  SET DB_UNIQUE_NAME='PRODDBSTBY'
  SET DB_FILE_NAME_CONVERT='+DATA/PRODDB/','+DATA/PRODDBSTBY/'
  SET LOG_FILE_NAME_CONVERT='+DATA/PRODDB/','+DATA/PRODDBSTBY/'
  SET CONTROL_FILES='+DATA/PRODDBSTBY/control01.ctl','+FRA/PRODDBSTBY/control02.ctl'
  SET FAL_CLIENT='PRODDBSTBY'
  SET FAL_SERVER='PRODDB'
  SET LOG_ARCHIVE_CONFIG='DG_CONFIG=(PRODDB,PRODDBSTBY)'
  SET LOG_ARCHIVE_DEST_1='LOCATION=USE_DB_RECOVERY_FILE_DEST VALID_FOR=(ALL_LOGFILES,ALL_ROLES) DB_UNIQUE_NAME=PRODDBSTBY'
  SET LOG_ARCHIVE_DEST_2='SERVICE=PRODDB LGWR ASYNC VALID_FOR=(ONLINE_LOGFILES,PRIMARY_ROLE) DB_UNIQUE_NAME=PRODDB'
  SET DB_RECOVERY_FILE_DEST='+FRA'
  SET DB_RECOVERY_FILE_DEST_SIZE='100G';
üîπ STEP 7: CONFIGURE DATA GUARD BROKER (OPTIONAL BUT RECOMMENDED)
Enable on both:

sql
Copy
Edit
ALTER SYSTEM SET DG_BROKER_START=TRUE;
Start DGMGRL and configure:

bash
Copy
Edit
dgmgrl sys/oracle

-- Create configuration
CREATE CONFIGURATION 'PROD_DG' AS
  PRIMARY DATABASE IS 'PRODDB' CONNECT IDENTIFIER IS PRODDB;

-- Add standby
ADD DATABASE 'PRODDBSTBY' AS
  CONNECT IDENTIFIER IS PRODDBSTBY
  MAINTAINED AS PHYSICAL;

-- Enable configuration
ENABLE CONFIGURATION;
üîπ STEP 8: VALIDATE SYNCHRONIZATION
sql
Copy
Edit
-- On standby
select sequence#,applied from v$archived_log order by sequence#;

-- Check recovery progress
select process, status from v$managed_standby;
üîπ STEP 9: PERFORM SWITCHOVER
Once in sync and validated:

bash
Copy
Edit
dgmgrl sys/oracle
SWITCHOVER TO PRODDBSTBY;
Or via SQL:

sql
Copy
Edit
-- On Primary
ALTER DATABASE COMMIT TO SWITCHOVER TO PHYSICAL STANDBY;

-- Restart both roles
SHUTDOWN IMMEDIATE;
STARTUP;

-- On Standby
ALTER DATABASE ACTIVATE STANDBY DATABASE;
üîπ STEP 10: REGISTER WITH CLUSTERWARE ON NEW SERVERS
bash
Copy
Edit
srvctl add database -d PRODDBNEW -o $ORACLE_HOME -p '+DATA/PRODDBNEW/spfilePRODDBNEW.ora' -r PRIMARY -n PRODDBNEW

srvctl add instance -d PRODDBNEW -i PRODDBNEW1 -n node1
srvctl add instance -d PRODDBNEW -i PRODDBNEW2 -n node2

srvctl start database -d PRODDBNEW
üîπ STEP 11: CLEANUP OLD PRIMARY (OPTIONAL)
After ensuring everything is running well, decommission old primary.

üîê BONUS: VERIFY LOG APPLY AND ROLE
sql
Copy
Edit
SELECT DATABASE_ROLE, OPEN_MODE FROM V$DATABASE;
On new PRIMARY, it should show:

ini
Copy
Edit
DATABASE_ROLE = PRIMARY
OPEN_MODE = READ WRITE
‚úÖ ADVANTAGES OF THIS METHOD
Minimal downtime (just during switchover)

Full production continuity during sync

Built-in disaster recovery testing

Scalable and supported for future role transitions

Would you like me to provide automated shell scripts, Data Guard broker commands, or a step-by-step runbook template to execute with your DBA team?

Also let me know your exact Oracle version (e.g., 19.18 or 21c), and I can tailor config syntax accordingly.







You said:
yes, please my oracle version is 19c


ChatGPT said:
Update memory? ‚ÄúIs working with Oracle RAC 2-node database version...‚Äù

Yes

No
Perfect! Since you're on Oracle 19c and doing a RAC to RAC migration using Data Guard, here's a ready-to-use runbook with commands, broker setup, and automation-friendly structure ‚Äî ideal for executing with your DBA team.

‚úÖ MIGRATION RUNBOOK ‚Äì Oracle 19c RAC to RAC using Data Guard
üß∞ OVERVIEW
Source DB: PRODDB (RAC, 2 nodes)

Target DB: PRODDBNEW (RAC, 2 nodes)

DB_UNIQUE_NAME (Target): PRODDBNEW

Toolset: RMAN + Data Guard Broker (dgmgrl)

Edition: Oracle 19c

ü™ú STEP-BY-STEP EXECUTION PLAN
üîπ STEP 1: CONFIGURE PRIMARY (PRODDB)
sql
Copy
Edit
-- On PRODDB (primary)
archive log list;
alter database force logging;

-- Enable DG Broker
alter system set dg_broker_start=true scope=both sid='*';
Create standby logs (if not present):

sql
Copy
Edit
-- Rule: (Number of Online Redo Log Groups + 1) per thread
alter database add standby logfile thread 1 group 11 size 200M;
alter database add standby logfile thread 1 group 12 size 200M;
alter database add standby logfile thread 2 group 13 size 200M;
alter database add standby logfile thread 2 group 14 size 200M;
üîπ STEP 2: CREATE STANDBY INIT FILE AND PASSWORD FILE
sql
Copy
Edit
-- From PRODDB
create pfile='/tmp/initPRODDBNEW.ora' from spfile;
Manually edit:

ini
Copy
Edit
db_name=PRODDB
db_unique_name=PRODDBNEW
log_file_name_convert='+DATA/PRODDB/', '+DATA/PRODDBNEW/'
db_file_name_convert='+DATA/PRODDB/', '+DATA/PRODDBNEW/'
fal_server=PRODDB
fal_client=PRODDBNEW
log_archive_config='DG_CONFIG=(PRODDB,PRODDBNEW)'
log_archive_dest_2='SERVICE=PRODDBNEW LGWR ASYNC VALID_FOR=(ONLINE_LOGFILES,PRIMARY_ROLE) DB_UNIQUE_NAME=PRODDBNEW'
Create password file on both nodes of target:

bash
Copy
Edit
orapwd file=$ORACLE_HOME/dbs/orapwPRODDBNEW password=oracle format=12
üîπ STEP 3: PREPARE TNS ON BOTH SERVERS
$TNS_ADMIN/tnsnames.ora:

ini
Copy
Edit
PRODDB =
  (DESCRIPTION=(ADDRESS=(PROTOCOL=TCP)(HOST=source-scan)(PORT=1521))
  (CONNECT_DATA=(SERVICE_NAME=PRODDB)))

PRODDBNEW =
  (DESCRIPTION=(ADDRESS=(PROTOCOL=TCP)(HOST=target-scan)(PORT=1521))
  (CONNECT_DATA=(SERVICE_NAME=PRODDBNEW)))
Test with:

bash
Copy
Edit
tnsping PRODDBNEW
üîπ STEP 4: STARTUP STANDBY ON TARGET (PRODDBNEW)
bash
Copy
Edit
export ORACLE_SID=PRODDBNEW
sqlplus / as sysdba
startup nomount pfile='/u01/app/oracle/product/19.0.0/dbhome_1/dbs/initPRODDBNEW.ora';
Create necessary audit and dump directories:

bash
Copy
Edit
mkdir -p $ORACLE_BASE/admin/PRODDBNEW/{adump,bdump,cdump,udump}
üîπ STEP 5: RMAN DUPLICATE FOR STANDBY
bash
Copy
Edit
rman target sys/oracle@PRODDB auxiliary sys/oracle@PRODDBNEW
Inside RMAN:

rman
Copy
Edit
DUPLICATE TARGET DATABASE 
FOR STANDBY 
FROM ACTIVE DATABASE 
DORECOVER 
SPFILE
  SET DB_UNIQUE_NAME='PRODDBNEW'
  SET DB_FILE_NAME_CONVERT='+DATA/PRODDB/','+DATA/PRODDBNEW/'
  SET LOG_FILE_NAME_CONVERT='+DATA/PRODDB/','+DATA/PRODDBNEW/'
  SET CONTROL_FILES='+DATA/PRODDBNEW/control01.ctl','+FRA/PRODDBNEW/control02.ctl'
  SET FAL_CLIENT='PRODDBNEW'
  SET FAL_SERVER='PRODDB'
  SET LOG_ARCHIVE_CONFIG='DG_CONFIG=(PRODDB,PRODDBNEW)'
  SET LOG_ARCHIVE_DEST_1='LOCATION=USE_DB_RECOVERY_FILE_DEST VALID_FOR=(ALL_LOGFILES,ALL_ROLES) DB_UNIQUE_NAME=PRODDBNEW'
  SET LOG_ARCHIVE_DEST_2='SERVICE=PRODDB LGWR ASYNC VALID_FOR=(ONLINE_LOGFILES,PRIMARY_ROLE) DB_UNIQUE_NAME=PRODDB'
  SET DB_RECOVERY_FILE_DEST='+FRA'
  SET DB_RECOVERY_FILE_DEST_SIZE='100G';
üîπ STEP 6: VERIFY APPLY STATUS
sql
Copy
Edit
-- On standby
SELECT process, status, thread#, sequence# FROM v$managed_standby;
üîπ STEP 7: CONFIGURE DATA GUARD BROKER
bash
Copy
Edit
dgmgrl sys/oracle@PRODDB

CREATE CONFIGURATION dgconf AS PRIMARY DATABASE IS PRODDB CONNECT IDENTIFIER IS PRODDB;

ADD DATABASE PRODDBNEW AS CONNECT IDENTIFIER IS PRODDBNEW MAINTAINED AS PHYSICAL;

ENABLE CONFIGURATION;
üîπ STEP 8: PERFORM SWITCHOVER
Using DGMGRL:

bash
Copy
Edit
dgmgrl sys/oracle
SWITCHOVER TO PRODDBNEW;
OR Using SQL:

sql
Copy
Edit
-- On PRODDB
ALTER DATABASE COMMIT TO SWITCHOVER TO PHYSICAL STANDBY;
SHUTDOWN IMMEDIATE;
STARTUP;

-- On PRODDBNEW
ALTER DATABASE ACTIVATE STANDBY DATABASE;
SHUTDOWN IMMEDIATE;
STARTUP;
üîπ STEP 9: REGISTER NEW DB WITH CLUSTERWARE
bash
Copy
Edit
-- On PRODDBNEW node1
srvctl add database -d PRODDBNEW -o $ORACLE_HOME -p '+DATA/PRODDBNEW/spfilePRODDBNEW.ora' -r PRIMARY -n PRODDBNEW

srvctl add instance -d PRODDBNEW -i PRODDBNEW1 -n racnode1
srvctl add instance -d PRODDBNEW -i PRODDBNEW2 -n racnode2

srvctl start database -d PRODDBNEW
üîπ STEP 10: VALIDATE
sql
Copy
Edit
SELECT name, open_mode, database_role FROM v$database;
Should return:

pgsql
Copy
Edit
OPEN_MODE      | READ WRITE
DATABASE_ROLE  | PRIMARY
You can also check:

sql
Copy
Edit
SELECT DEST_ID, STATUS, ERROR FROM V$ARCHIVE_DEST;
‚úÖ DONE! üéØ
Your 2-node RAC database is now fully migrated to the new servers using Data Guard with minimal downtime and full role transition.

üõ†Ô∏è OPTIONAL EXTRAS
üîÅ Add observer for automatic failover

üìù Configure FRA and backups post-migration

üìã Maintain runbook template for future DR drills

Would you like a downloadable Bash script template, DGMGRL config file, or a cut-paste runbook in doc format for your team?
